cont
exit
cont
uri
exit
open("http://wa.com")
open(@uri)
@uri.url
@uri.path
@uri
URI.open
cont
exit
@uri.read
@uri
@path
exit
git status
Rjb::import("fr.lium.spkDiarization.programs.MTrainInit").make(features, @clusters.java_object, init_vect.java_object, parameter)
Rjb::import("fr.lium.spkDiarization.programs.MTrainInit").make(features, @clusters.java_object, init_vect, parameter)
init_vect = Rjb::JavaObjectWrapper.new("java.util.ArrayList", @clusters.java_object.cluster_get_size)
@clusters.java_object.cluster_get_size
init_vect
exit
File.join(File.expand_path(File.dirname(__FILE__)), 'lib', 'diarize', 'ubm.gmm')
@clusters.cluster_get_size.class
@clusters.cluster_get_size
Rjb::import("fr.lium.spkDiarization.programs.MTrainInit").make(features, @clusters.java_object, init_vect, parameter)
init_vect = Rjb::import("java.util.ArrayList").new(4)
Rjb::import("fr.lium.spkDiarization.programs.MTrainInit").make(features, nil, init_vect, parameter)
Rjb::import("fr.lium.spkDiarization.programs.MTrainInit").make(features, @clusters, init_vect, parameter)
Rjb::import("fr.lium.spkDiarization.programs.MTrainInit").make(features, @clusters.java_object, init_vect, parameter)
init_vect = Rjb::import("java.util.ArrayList").new(@clusters.cluster_get_size)
features = Rjb::import("fr.lium.spkDiarization.lib.MainTools").readFeatureSet(parameter, @clusters.java_object)
parameter
Rjb::import("fr.lium.spkDiarization.programs.MTrainInit").make(features)
Rjb::import("fr.lium.spkDiarization.programs.MTrainInit").make(features, @clusters.java_object, init_vect, parameter)
exit
init_vect
@clusters.cluster_get_size
features
Rjb::import("fr.lium.spkDiarization.programs.MTrainInit").make
Rjb::import("fr.lium.spkDiarization.programs.MTrainInit")
Rjb::import("fr.lium.spkDiarization.programs.MTrainInit").make(features, @clusters.java_object, init_vect, parameter)
parameter
init_vect
@clusters.java_object
features
features.java_object
features
Rjb::import("fr.lium.spkDiarization.programs.MTrainInit").make(features, @clusters.java_object, init_vect, parameter)
exit
gmm_vect.each_with_index
gmm_vect
Rjb::import("fr.lium.spkDiarization.programs.MTrainMAP").make(features.java_object, @clusters.java_object, init_vect, gmm_vect.java_object, parameter)
features
Rjb::import("fr.lium.spkDiarization.programs.MTrainMAP").make(features, @clusters.java_object, init_vect, gmm_vect.java_object, parameter)
Rjb::import.new("fr.lium.spkDiarization.programs.MTrainMAP").make(features)
Rjb::import.new("fr.lium.spkDiarization.programs.MTrainMAP").make([features, @clusters.java_object, init_vect, gmm_vect.java_object, parameter])
Rjb::import.new("fr.lium.spkDiarization.programs.MTrainMAP").make
Rjb::import.new("fr.lium.spkDiarization.programs.MTrainMAP").make(features, @clusters.java_object, init_vect, gmm_vect.java_object, parameter)
Rjb::import.new("fr.lium.spkDiarization.programs.MTrainMAP")
Rjb::import.new("fr.lium.spkDiarization.programs.MTrainMAP").make(features, @clusters.java_object, init_vect, gmm_vect.java_object, parameter)
gmm_vect = Rjb::JavaObjectWrapper.new("java.util.ArrayList")
features.setCurrentShow(parameter.show)
parameter.show = show
parameter.parameterVarianceControl.setVarianceControl('0.01,10.0')
@path
parameter.parameterEM.setEMControl('1,5,0.01')
parameter.parameterInputFeature.setFeatureMask(@path)
parameter.parameterInputFeature.setFeaturesDescription('audio2sphinx,1:3:2:0:0:0,13,1:1:300:4')
parameter = Rjb::import.new("fr.lium.spkDiarization.parameter.Parameter").new
Rjb::import("fr.lium.spkDiarization.programs.MTrainInit").make(features.java_object, @clusters.java_object, init_vect, parameter)
init_vect = Rjb::import("java.util.ArrayList").new(@clusters.cluster_get_size)
@clusters.cluster_get_size
features = Rjb::JavaObjectWrapper.new(Rjb::import("fr.lium.spkDiarization.lib.MainTools").readFeatureSet(parameter, @clusters.java_object))
features = Rjb::import("fr.lium.spkDiarization.lib.MainTools").readFeatureSet(parameter, @clusters.java_object)
parameter.parameterModelSetInputFile.setMask(File.join(File.expand_path(File.dirname(__FILE__)), 'lib', 'diarize', 'ubm.gmm'))
parameter.parameterInitializationEM.setModelInitMethod('copy')
parameter.parameterInputFeature.setFeatureMask(@path)
parameter.parameterInputFeature.setFeaturesDescription('audio2sphinx,1:3:2:0:0:0,13,1:1:300:4')
parameter = Rjb::import("fr.lium.spkDiarization.parameter.Parameter").new
parameter
Rjb::import("fr.lium.spkDiarization.lib.MainTools").readFeatureSet(parameter, @clusters.java_object)
@clusters
Rjb::import("fr.lium.spkDiarization.lib.MainTools").readFeatureSet(parameter, @clusters)
Rjb::import("fr.lium.spkDiarization.lib.MainTools")
Rjb::import("fr.lium.spkDiarization.lib.MainTools.readFeatureSet")
Rjb::import("fr.lium.spkDiarization.lib.MainTools").initialize
Rjb::import("fr.lium.spkDiarization.lib.MainTools")
Rjb::import("fr.lium.spkDiarization.lib.MainTools").new.readFeatureSet
Rjb::import("fr.lium.spkDiarization.lib.MainTools").readFeatureSet
Rjb::import("fr.lium.spkDiarization.lib.MainTools")
features = Rjb::JavaObjectWrapper.new(Rjb::import("fr.lium.spkDiarization.lib.MainTools").readFeatureSet(parameter, @clusters))
Rjb::JavaObjectWrapper.new("fr.lium.spkDiarization.lib.MainTools").readFeatureSet(parameter, @clusters)
parameter.parameterModelSetInputFile.setMask(File.join(File.expand_path(File.dirname(__FILE__)), 'lib', 'diarize', 'ubm.gmm'))
File.join(File.expand_path(File.dirname(__FILE__)), 'lib', 'diarize', 'ubm.gmm')
File.join(File.expand_path(File.dirname(__FILE__)), 'ubm.gmm')
parameter.parameterInitializationEM.setModelInitMethod('copy')
parameter.parameterInputFeature.setFeatureMask(@path)
parameter.parameterInputFeature.setFeaturesDescription('audio2sphinx,1:3:2:0:0:0,13,1:1:300:4')
parameter = Rjb::JavaObjectWrapper.new("fr.lium.spkDiarization.parameter.Parameter")
Rjb::JavaObjectWrapper.new("fr.lium.spkDiarization.parameter.Parameter").new
Rjb::JavaObjectWrapper.new("fr.lium.spkDiarization.parameter.Parameter")
cont
Segment.new(audio, start, duration, gender, bandwidth, speaker_id)
speaker_id
exit
speaker_id
bandwidth
gender
start
audio
duration     = segment.length_in_second
start        = segment.start_in_second
segment.length_in_second
segment.start_in_second
segment.class
segment
exit
cluster.class
cluster
bandwidth = cluster.bandwidth
gender = cluster.gender
cluster.gender
cluster = clusters.getCluster(speaker_id.to_s)
cluster = clusters.get_cluster(speaker_id.to_s)
speaker_id.class
speaker_id
clusters.getCluster("S0")
clusters.getCluster
clusters.getCluster(speaker_id)
clusters
clusters.get_cluster(speaker_id)
clusters
speaker_id.to_s
speaker_id
cont
exit
@clusters.to_a.first.toString()
@clusters.to_a.first
@clusters.to_a
@clusters.each {|c| puts c}
@clusters.each
@clusters
exit
@clusters
@clusters.each
parameter
@clusters
@clusters.toArray()
@clusters.to_a
@clusters
