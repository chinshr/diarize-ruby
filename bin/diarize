#!/usr/bin/env ruby
require "diarize"
require "gli"
require "uri"
require "drb/drb"

include GLI::App

def build_audio_from_args(args, options = {})
  $stdout.puts args.first.to_s if options[:verbose]
  audio = Diarize::Audio.new(args.first)
  audio.analyze!
  audio
end

def build_remote_audio_from_args(args, options = {})
  remote = client(options)

  $stdout.puts args.first.to_s if options[:verbose]
  audio = remote.build_audio(args.first)
  audio.analyze!
  audio
rescue DRb::DRbConnError => ex
  $stdout.puts 'Connection error, start server with "diarize server"'
end

def client(options = {})
  uri = "druby://#{options[:host]}:#{options[:port]}"
  DRb.start_service
  DRbObject.new_with_uri(uri)
end

program_desc 'Diarize is an easy-to-use toolkit for speaker segmentation.'

version Diarize::VERSION

subcommand_option_handling :normal
arguments :strict

#-v, --verbose
desc 'Print more verbose output'
switch [:verbose, :v]

desc 'start console'
command [:console, :c] do |console|
  console.action do |global_options, options, args|
    require 'irb'

    ARGV.clear
    IRB.start
  end
end

desc 'use remote server'
command [:remote, :r] do |remote|
  remote.command [:a, :audio] do |audio|
    audio.desc 'diarize remote audio segments FILENAME'
    audio.arg_name 'FILENAME', :multiple
    audio.command [:se, :segment, :segments] do |segments|
      segments.action do |global_options, options, args|
        audio = build_remote_audio_from_args(args, options.first.last.first.last)
        audio.segments.each do |segment|
          $stdout.puts segment.uri
        end if audio
      end
    end

    audio.desc 'diarize remote audio speakers FILENAME'
    audio.arg_name 'FILENAME', :multiple
    audio.command [:sp, :speaker, :speakers] do |speakers|
      speakers.action do |global_options, options, args|
        audio = build_remote_audio_from_args(args, options.first.last.first.last)
        audio.speakers.each do |speaker|
          $stdout.puts speaker.uri
        end if audio
      end
    end
  end

  #-h, --host HOSTNAME
  remote.desc 'Host, e.g. "localhost"'
  remote.default_value 'localhost'
  remote.arg_name 'HOSTNAME'
  remote.flag [:h, :host]

  #-p, --port PORT
  remote.desc 'Port number'
  remote.default_value 9999
  remote.arg_name 'PORT'
  remote.flag [:p, :port]
end

desc 'audio file'
command [:audio, :a] do |audio|
  audio.desc 'diarize audio segments FILENAME'
  audio.arg_name 'FILENAME', :multiple
  audio.command [:se, :segment, :segments] do |segments|
    segments.action do |global_options, options, args|
      audio = build_audio_from_args(args, global_options)
      audio.segments.each do |segment|
        $stdout.puts segment.uri
      end
    end
  end

  audio.desc 'diarize audio speakers FILENAME'
  audio.arg_name 'FILENAME', :multiple
  audio.command [:sp, :speaker, :speakers] do |speakers|
    speakers.action do |global_options, options, args|
      audio = build_audio_from_args(args, global_options)
      audio.speakers.each do |speaker|
        $stdout.puts speaker.uri
      end
    end
  end
end

desc 'start server'
command [:server, :s] do |server|
  server.action do |global_options, options, args|
    merged_options = options.merge(global_options)
    argv = merged_options.reject {|k, v| !k.is_a?(String)}
    argv = argv.inject({}) {|r, h| r[h[0].length > 1 ? "--#{h[0]}" : "-#{h[0]}"] = h.last; r}
    argv = argv.reject {|k, v| !v}
    argv = argv.to_a.flatten

    uri = "druby://#{merged_options[:host]}:#{merged_options[:port]}"
    $stdout.puts "DRb server"
    $stdout.puts "diarize-ruby #{Diarize::VERSION}"
    $stdout.puts "Arguments: #{argv.inspect}" if global_options[:verbose]
    if merged_options[:pidfile]
      $stdout.puts "Pidfile '#{merged_options[:pidfile]}' (#{$$})"
    end
    $stdout.puts "Listening on #{uri}, CTRL+C to stop"
    server = Diarize::Server.new
    DRb.start_service(uri, server)
    DRb.thread.join
  end

  #-h, --host HOSTNAME
  server.desc 'Host, e.g. "localhost"'
  server.default_value 'localhost'
  server.arg_name 'HOSTNAME'
  server.flag [:h, :host]

  #-p, --port PORT
  server.desc 'Port number'
  server.default_value 9999
  server.arg_name 'PORT'
  server.flag [:p, :port]

  #-P, --pidfile PIDFILE
  server.desc 'PID file'
  server.arg_name 'PIDFILE'
  server.flag [:P, :pidfile]
end

pre do |global, command, options, args|
  if command.name == :server
    File.write(options[:pidfile], $$) if options[:pidfile]
  end
  true
end

post do |global, command, options, args|
  true
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

begin
  exit run(ARGV)
rescue UncaughtThrowError
  $stdout.puts "Bye."
end
